#!/usr/bin/perl

$| = 1;

use strict;
use Util;

my $ccc_stamp = "Generated by the Compiler Compiler Compiler (ccc), " . localtime();

my $flag_buildtest = 0;
my $flag_dumpgrammar = 0;
my $flag_verbose_bison = 0;
my $flag_debug_bison = 0;
my $flag_debug_flex = 0;

my $dos = 1;
my $whitespace_regex = " \\t\\n";
$whitespace_regex .= "\015" if ($dos);
$whitespace_regex = "[$whitespace_regex]";

&parse_args;

my @seconds = ();
my %sequences = ();
my %rules = ();
my %lexes = ();
my @lex_order = ();
my %lextypes = ();
my @lexignores = ();
my %precedences = ();
my @prec_order = ();
my %literal_tokens = ();

my $unique_serial = 0;

my $snerr = 0;

my $infile = $ARGV[0];

my $stub = $infile;
$stub =~ s/.ccc$//;
my $yaccfile = $stub . ".y";
my $lexfile = $stub . ".l";
my $yycfile = $stub . ".yy.c";
my $tabcfile = $stub . ".tab.c";
my $yyofile = $stub . ".yy.o";
my $tabofile = $stub . ".tab.o";
my $includefile = $stub . ".h";
my $testcfile = $stub . ".c";
my $grammardumpfile = $stub . ".grammar";

&main;

sub parse_args {
  my ($arg,@realargs);
  foreach $arg (@ARGV) {
    if ($arg =~ /^-(.*$)/) {
      my $argstring = $1;
      if ($argstring eq "b") {
        $flag_buildtest = 1;
      } elsif ($argstring eq "u") {
        $flag_dumpgrammar = 1;
      } elsif ($argstring eq "vb") {
        $flag_verbose_bison = 1;
      } elsif ($argstring eq "db") {
        $flag_debug_bison = 1;
      } elsif ($argstring eq "df") {
        $flag_debug_flex = 1;
      } else {
        die "Unknown arg: $arg";
      }
    } else {
      push @realargs, $arg;
    }
  }

  @ARGV = @realargs;
}

sub scan_infile {
  open( infile, $infile ) || die "$!: $infile";

  while (<>) {
#    chomp;
    s/\s*$//;

    if (/^\s*#/) {
      # comment
      # print "COMMENT $_\n";
    } elsif (/^\s*$/) {
      # empty
      # print "EMPTY $_\n";
    } else {
      $snerr = 0;

      if (m/^(\S+)\s+(.*)/) {
        my $first = $1;
        my $rest = $2;
        #print "first $first rest $rest\n";

        if ($first eq "lex") {
          if (m/^\S+\s+(\S+)\s+(\S+)\s+(.+$)/) {
            my $name = $1;
            my $type = $2;
            my $regex = $3;
            do_lex( $name, $type, $regex );
            #print "lex $name=$regex\n";
          } else {
            $snerr = 1;
          }
        } elsif ($first eq "parse") {
          if (m/^\S+\s+(\S+)\s+(.+$)/) {
            my $name = $1;
            my $rhs = $2;
            my $subtype = "";

            if ($name =~ /:/) {
              $name =~ /(^.+):(.+$)/ || die "Bad rule name $name";
              $name = $1;
              $subtype = $2;
            }

            do_parse( $name, $subtype, $rhs );
          }
        } elsif ($first eq "precedence") {
          &do_precedence( $rest );
        } elsif ($first eq "lexignore") {
          &do_lexignore( $rest );
        } else {
          $snerr = 1;
        }
      } else {
        $snerr = 1;
      }

      if ($snerr==1) {
        print stderr "Syntax error: $_\n";
      }
    }
  }

  close infile;
}

sub main {
  &scan_infile;

  &process;

  if ($flag_dumpgrammar) {
    open( grammar, ">$grammardumpfile" ) || die $!;
    &dump_grammar( \*grammar );
    close grammer;
  }

  &generate_yacc_and_lex;

  &build;

  if ($flag_buildtest) {
    &build_test;
  }
}

sub do_precedence {
  my ($spec) = @_;
  my @spec = split( /\s/, $spec );
  my $way = shift @spec;
  die "Bad precedence: $way" if ($way ne "left" && $way ne "right" && $way ne "nonassoc");
  my $tok;
  foreach $tok (@spec) {
    $precedences{$tok} = $way;
    push @prec_order, $tok;
  }
}

sub do_lexignore
{
  my ($regex) = @_;
  push @lexignores, $regex;
}

sub do_lex
{
  my ($name, $type, $regex) = @_;

  $lexes{$name} = $regex;
  $lextypes{$name} = $type;
  push( @lex_order, $name );
}

sub do_parse
{
  my ($rulename, $subtype, $rhsstring) = @_;
  #print "parse $rulename=$rhsstring\n";

  my @rhs = split( /\s/, $rhsstring );

  my $prec = "";
  # Check for precedence marker
  {
    my $lastterm = $rhs[$#rhs];
    #print "LAST $lastterm\n";
    if ($lastterm =~ /^\*(.*$)/) {
      #print "PREC $1\n";
      $prec = $1;
      pop @rhs;
    }
  }

  my $rhs;
  my $terms = [];
  foreach $rhs (@rhs) {
    my ($value, $hidden);

    $value = $rhs;
    $hidden = 0;

    if ($value =~ /-(.*$)/) {
      $hidden = 1;
      $value = $1;
    }

    if ($value eq "") {
      $snerr = 1;
    }

    push @{$terms}, [ $value, $hidden ];
  }

  my $alt = {};
  $alt->{subtype} = $subtype;
  $alt->{terms} = $terms;
  if ($prec ne "") {
    $alt->{prec} = $prec;
  }
  push @{$rules{$rulename}}, $alt;
#  $rules{$rulename}->{$subtype} = $terms;
}

#Util->dump( \%rules );

sub dump_grammar {
  my (@args) = @_;

  my $stream = \*STDOUT;

  if (@args>=1) {
    $stream = $args[0];
  }

  &dump_lexes( $stream );
  &dump_precedences( $stream );
  &dump_rules( $stream );
}

sub dump_precedences {
  my (@args) = @_;

  my $stream = \*STDOUT;

  if (@args>=1) {
    $stream = $args[0];
  }

  my ($way,$tok);
  foreach $tok (@prec_order) {
    my $way = $precedences{$tok};
    print $stream "precedence: $way $tok\n";
  }
}

sub dump_rules {
  my (@args) = @_;

  my $stream = \*STDOUT;

  if (@args>=1) {
    $stream = $args[0];
  }

  my ($rulename, $rule);
  while (($rulename,$rule) = each %rules) {
    my ($subtype,$alt);
    foreach $alt (@$rule) {
#    while (($subtype,$alt) = each %$rule) {
      print $stream "$rulename\n";
      my $subtype = $alt->{subtype};
      my $terms = $alt->{terms};
      my $term;
      foreach $term (@$terms) {
        my ($value,$hidden) = @$term;
        print $stream "  $value\n";
      }
    }
  }
}

sub dump_lexes {
  my (@args) = @_;

  my $stream = \*STDOUT;

  if (@args>=1) {
    $stream = $args[0];
  }

  my $lex;
  foreach $lex (sort keys %lexes) {
    my $regex = $lexes{$lex};
    my $type = $lextypes{$lex};
    print $stream "lex $lex $type $regex\n";
  }
}

sub process {
  &deliteralize_literals;
  &expand_multipliers;
}

sub deliteralize_literals {
  my ($rulename, $rule);
  while (($rulename,$rule) = each %rules) {
    my ($alt,$subtype);
    foreach $alt (@$rule) {
      my $subtype = $alt->{subtype};
      my $terms = $alt->{terms};
      my $term;
      foreach $term (@$terms) {
        my ($value,$hidden) = @$term;

        my $ending = "";
        if ($value =~ /^(.*)([*+])$/) {
          $value = $1;
          $ending = $2;
        }

        my @items = split( /\//, $value );
        @items = map {
          if ($_ =~ /["']/) {
            #print "Delit $value\n";
            my $token = &get_literal_token( $_ );
            $term->[0] = $token;
            $lexes{$token} = $_;
            $_ = $token;
            $_;
          } else {
            $_;
          }
        } @items;

        $value = join( "/", @items );
        $value .= $ending;

        $term->[0] = $value;
      }
    }
  }
}

sub get_literal_token {
  my ($literal) = @_;
  if (!exists $literal_tokens{$literal}) {
    $literal_tokens{$literal} = &unique;
    unshift @lex_order, $literal_tokens{$literal};
  }
  return $literal_tokens{$literal};
}

sub expand_multipliers {
  my ($rulename, $rule);
  while (($rulename,$rule) = each %rules) {
    my ($alt,$subtype);
    foreach $alt (@$rule) {
      my $subtype = $alt->{subtype};
      my $terms = $alt->{terms};
      my $term;
      foreach $term (@$terms) {
        my ($value,$hidden) = @$term;
        if ($value =~ /(^.+)([*+]$)/) {
          my $singvalue = $1;
          my $splitter = "";
          my $multiplier = $2;
          if ($singvalue =~ /(^.+)\/(.+$)/) {
            $singvalue = $1;
            $splitter = $2;
          }
          my $token = &unique;
          $term->[0] = $token;
          my $second = "";
          if ($splitter ne "" && $multiplier eq "*") {
            $second = &unique;
            push @seconds, $second;
          }
          $sequences{$token} = {"sequencetarget"=>$singvalue, "multiplier"=>$multiplier,
                                "splitter"=>$splitter, "second"=>$second};
        }
      }
    }
  }
}

sub generate_yacc_and_lex {
  open( yacc, ">$yaccfile" ) || die $!;

  # Generate stamp and header
  print yacc "/* $ccc_stamp */\n";
  print yacc <<EOF;
%{
#include <stdio.h>
#include "mem.h"
#include "sexp.h"
#define YYDEBUG 1
void yyerror( char *s );
extern FILE *yyin;
extern char *yytext;
char *__${stub}_filename;
extern int __${stub}_token_start_line, __${stub}_token_end_line;
extern int __${stub}_token_start_char, __${stub}_token_end_char;
extern int __${stub}_token_start_gchar, __${stub}_token_end_gchar;
extern sexp __${stub}_where_stamp( void );
extern char *__${stub}_strdoop_no_quotes( char *string );
sexp _ccc_top=0;
%}

%union {
  char *c;
  sexp s;
}

EOF

  # Generate lex type decl
  {
    print yacc "%token <c> ";
    my $lex;
    foreach $lex (sort keys %lexes) {
      print yacc "_TOK_$lex ";
    }
    print yacc "\n";
  }

  # Generate precedences
  {
    my ($way,$tok);
    foreach $tok (@prec_order) {
      my $way = $precedences{$tok};
      print yacc "\%$way _TOK_$tok\n";
    }
  }

  # Generate yacc type decl
  {
    print yacc "%type <s> _top ";
    my ($rulename,$lex,$sequencename,$second);
    foreach $rulename (sort keys %rules) {
      print yacc "$rulename ";
    }
    foreach $lex (sort keys %lexes) {
      print yacc "$lex ";
    }
    foreach $sequencename (sort keys %sequences) {
      print yacc "$sequencename ";
    }
    foreach $second (@seconds) {
      print yacc "$second ";
    }
    print yacc "\n";
  }

  print yacc "\n";

  print yacc "%%\n\n";

  print yacc "_top: top { \$\$ = \$1;  _ccc_top = \$1; } ;\n\n";

  # Generate regular rules
  print yacc "/* Regular rules */\n\n";
  my ($rulename, $rule);
  while (($rulename,$rule) = each %rules) {
    print yacc "$rulename:\n";
    my ($alt,$subtype);
    my $first = 1;
    foreach $alt (@$rule) {
#    while (($subtype,$alt) = each %$rule) {
      my $subtype = $alt->{subtype};
      my $terms = $alt->{terms};
      if ($first) {
        print yacc "    ";
        $first = 0;
      } else {
        print yacc "  | ";
      }
      my $term;
      foreach $term (@$terms) {
        my ($value,$hidden) = @$term;
        print yacc "$value ";
      }
      if (exists $alt->{prec}) {
        print yacc " %prec _TOK_$alt->{prec}";
      }
      print yacc " {\n";
      print yacc "      sexp s = nil;\n";
      my $nterms = @$terms;
      my $inx=$nterms;
      foreach $term (reverse @$terms) {
#          print "HA $nterms " . join( '+', @$terms ) . "\n";
        my ($value,$hidden) = @$term;
        if (!$hidden) {
          print yacc "      s = cons( \$$inx, s );\n";
        }
        $inx--;
      }
      $subtype = "default" if ($subtype eq "");
      print yacc "      s = cons( S($rulename), cons( S($subtype), s ) );\n";
      print yacc "      \$\$ = s;\n";
      print yacc "    }\n";
    }
    print yacc ";\n\n";
  }

  # Generate sequence rules
  print yacc "/* Sequence rules */\n\n";
  {
    my ($sequencename,$sequencetarget,$seqspec);
    while (($sequencename,$seqspec) = each %sequences) {
      my $sequencetarget = $seqspec->{sequencetarget};
      my $multiplier = $seqspec->{multiplier};
      my $splitter = $seqspec->{splitter};
      if ($splitter eq "") {
        print yacc "$sequencename:\n";
        print yacc "    $sequencetarget $sequencename {\n";
        print yacc "      \$\$ = cons( \$1, \$2 );;\n";
        print yacc "    };\n";
        if ($multiplier eq "*") {
          print yacc "  | /* empty */ {\n";
          print yacc "    \$\$ = nil;\n";
          print yacc "    };\n\n";
        } else {
          print yacc "  | $sequencetarget {\n";
          print yacc "    sexp s = cons( \$1, nil );\n";
          print yacc "    \$\$ = s;\n";
          print yacc "    };\n\n";
        }
      } else {
        my $second = $seqspec->{second};
        if ($multiplier eq "*") {
          print yacc "$sequencename:\n";
          print yacc "    $second {\n";
          print yacc "      \$\$ = \$1;\n";
          print yacc "    }\n";
          print yacc "  | /* empty */ {\n";
          print yacc "      \$\$ = nil;\n";
          print yacc "    };\n\n";
          print yacc "$second: $sequencetarget $splitter $second {\n";
          print yacc "    \$\$ = cons( \$1, \$3 );\n";
          print yacc "    }\n";
          print yacc "  | $sequencetarget {\n";
          print yacc "      \$\$ = cons( \$1, nil );\n";
          print yacc "    };\n\n";
        } else {
          print yacc "$sequencename: $sequencetarget $splitter $sequencename {\n";
          print yacc "    \$\$ = cons( \$1, \$3 );\n";
          print yacc "    }\n";
          print yacc "  | $sequencetarget {\n";
          print yacc "      \$\$ = cons( \$1, nil );\n";
          print yacc "    };\n\n";
        }
      }
    }
  }

  # Generate token stub rules
  print yacc "/* Token stub rules */\n\n";
  {
    my $lex;
    foreach $lex (sort keys %lexes) {
      my $type = $lextypes{$lex};
      print yacc "$lex: _TOK_$lex %prec _TOK_$lex {\n";
      print yacc "  sexp s;\n";
      if ($type eq "string") {
        print yacc "  s = mkstring( __${stub}_strdoop_no_quotes( yytext ) );\n";
      } else {
        # default
        print yacc "  s = mksym( strdoop( yytext ) );\n";
      }
      print yacc "  SEXP_PROPERTIES( s ) = __${stub}_where_stamp();\n";
      #print yacc "  SEXP_PROPERTIES( s ) = nil;\n";
      print yacc "  \$\$ = s;\n";
      print yacc " };\n";
    }
  }

  print yacc "\n%%\n";

  print yacc <<EOF;
sexp __${stub}_where_stamp()
{
  static char spbuf[2048];
  sexp s;

  s = sexp_build( "((file %)(line % %) (char % %) (gchar % %))",
    SEXP_MKSTRING( __${stub}_filename ),
    SEXP_MKINT( __${stub}_token_start_line ), SEXP_MKINT( __${stub}_token_end_line ),
    SEXP_MKINT( __${stub}_token_start_char ), SEXP_MKINT( __${stub}_token_end_char ),
    SEXP_MKINT( __${stub}_token_start_gchar ), SEXP_MKINT( __${stub}_token_end_gchar ) );

  return s;
}
char *__${stub}_strdoop_no_quotes( char *string )
{
  int c, len;
  char *dup;

  len = strlen( string );
  A(len>=2);
  c = string[len-1];
  string[len-1] = 0;

  dup = strdoop( string+1 );

  string[len-1] = c;

  return dup;
}
sexp ${stub}_parse( char *filename, FILE *instream )
{
  yyin = instream;
  __${stub}_filename = filename == NULL ? "[NULL]" : filename;

  if (yyparse()) {
    return nil;
  } else {
    return _ccc_top;
  }
}
void yyerror( char *s )
{
  fprintf( stderr, "Syntax error at line %d, char %d\n",
    __${stub}_token_start_line, __${stub}_token_start_char );
}
int yywrap()
{
  return 1;
}
EOF

  close yacc;

  open( include, ">$includefile" ) || die $!;
  
  print include "/* $ccc_stamp */\n";
  print include "#include <stdio.h>\n";
  print include "#include \"sexp.h\"\n";
  print include "sexp ${stub}_parse( char *filename, FILE *instream );\n";

  close( include );

  open( lex, ">$lexfile" ) || die $!;

  print lex "/* $ccc_stamp */\n";

  print lex "%option outfile=\"$stub.yy.c\"\n";
  print lex "%{\n";
  print lex "#include \"sexp.h\"\n";
  print lex "#include \"$stub.tab.h\"\n";
  print lex "void badchar( int bc );\n";
  print lex "int __${stub}_token_start_line=1, __${stub}_token_end_line=1;\n";
  print lex "int __${stub}_token_start_char=0, __${stub}_token_end_char=0;\n";
  print lex "int __${stub}_token_start_gchar=0, __${stub}_token_end_gchar=0;\n";
  print lex "void __register_token();\n";
  print lex "#define YY_USER_ACTION __register_token();\n";
  print lex "%}\n";

  print lex "%{\n";
  print lex "%}\n\n";

  {
    my $lex;
#    foreach $lex (sort keys %lexes) {
    foreach $lex (@lex_order) {
      my $regex = $lexes{$lex};
      print lex "$lex\t$regex\n";
    }
  }

  print lex "__whitespace\t$whitespace_regex\n";

  print lex "%%\n\n";

  {
    my $lex;
#    foreach $lex (sort keys %lexes) {
    foreach $lex (@lex_order) {
      my $regex = $lexes{$lex};
      print lex "\{$lex\}\treturn _TOK_$lex;\n";
    }
  }

  {
     my $regex;
     foreach $regex (@lexignores) {
       print lex "$regex\t/* Ignore */\n";
     }
  }

  print lex "{__whitespace}\t;\n";
  print lex ".\tbadchar( yytext[0] );\n";

  print lex "%%\n\n";

  print lex <<EOF;
void badchar( int bc )
{
  fprintf( stderr, "Bad character in input: %d (%c)\\n", bc, bc );
  exit( 1 );
}
void __register_token()
{
  char *t;

  __${stub}_token_start_line = __${stub}_token_end_line;
  __${stub}_token_start_char = __${stub}_token_end_char;
  __${stub}_token_start_gchar = __${stub}_token_end_gchar;

  for (t=yytext; *t; ++t) {
    __${stub}_token_end_gchar++;

    if (*t=='\\n') {
      __${stub}_token_end_line++;
      __${stub}_token_end_char = 0;
    } else {
      __${stub}_token_end_char++;
    }
  }

/*
  printf( "token (%s) line %d-%d char %d-%d gchar %d-%d\n",
    yytext,
    __${stub}_token_start_line, __${stub}_token_end_line,
    __${stub}_token_start_char, __${stub}_token_end_char,
    __${stub}_token_start_gchar, __${stub}_token_end_gchar );
*/
}
EOF

  close lex;
}

sub cmd {
  my ($cmd) = @_;
  print "$cmd\n";
  my $ret = system( $cmd );
  #print "RET $ret\n";
  return $ret==0;
}

sub unique {
  my $token = "__u$unique_serial";
  $unique_serial++;
  return $token;
}

sub build {
  my $bison_args = "";
  my $flex_args = "";

  $bison_args .= "-l -t " if ($flag_debug_bison);
  $flex_args .= "-d " if ($flag_debug_flex);

  $bison_args .= "-v " if ($flag_verbose_bison);

  &cmd( "bison $bison_args -d $stub.y" ) || die $!;
  &cmd( "flex $flex_args $stub.l" ) || die $!;
  &cmd( "gcc -g -o $yyofile -c $yycfile" ) || die $!;
  &cmd( "gcc -g -o $tabofile -c $tabcfile" ) || die $!;
}

sub build_test {
  open( testc, ">$testcfile" ) || die $!;

  print testc "/* $ccc_stamp */\n\n";

  print testc <<EOF;
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>

#include "sexp.h"
#include "$includefile"

int main( int argc, char *argv[] )
{
  sexp tree;
  FILE *infile;

  infile = fopen( argv[1], "r" );
  tree = ${stub}_parse( infile );
  fclose( infile );

  if (tree)
    sexp_dump( tree );

  return 0;
}
EOF

  close( testc );

  cmd( "gcc -g -Lgc6.0/.libs -o $stub $testcfile $yyofile $tabofile sexp.o sparse.o sbuild.o mem.o spew.o strm.o sstrm.o fstrm.o growbuf.o -lgc" );
}
